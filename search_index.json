[
["index.html", "edXviz: Interactive Visualization of Student Engagement with edX MOOCs 1 edXviz: Interactive Visualization of Student Engagement with edX MOOCs", " edXviz: Interactive Visualization of Student Engagement with edX MOOCs Matt Emery, David Laing, Andrew Lim, Subi Zhang 2017-06-22 1 edXviz: Interactive Visualization of Student Engagement with edX MOOCs Capstone project for the Master of Data Science program at the University of British Columbia. To create this document, navigate to the notebook directory in R, and run the following code: bookdown::render_book(&#39;index.Rmd&#39;, &#39;all&#39;) "],
["video-overview.html", "2 Video Overview 2.1 Data Cleaning Pipeline 2.2 Visualization Reasoning and Caveats:", " 2 Video Overview 2.1 Data Cleaning Pipeline The figure above shows the data cleaning pipeline for video data. Raw tracklog and video data is initially stored in Google BigQuery. It is downloaded and cleaned programatically through the populate_courses.py script. Next, the cleaned wrangled_video_heat.csv file is used to generate the video visualizations. 2.2 Visualization Reasoning and Caveats: The main purpose of the plot shown above is to gain the trust of the instructor. Intuitively, we know that videos that occur later in the course are going to have less students because students are more likely drop the course. Additionally, this plot is a good introductory to the next plot. Initially, during usability testing, when showing the heat map plot below without showing the length of video plot above, instructors felt overwhelmed and had trouble interpretting the visualization. The heat map plot above shows which parts of the video are being viewed the most. The “watch rate” of each segment is calculated by the following equation: \\[\\text{Watch Rate} = (\\frac{\\text{Number of times a segment has been watched}}{\\text{Number of unique students who have started the video}})\\] In the above calculation of the watch rate, the “number of times a segment has been watched” is the raw count regardless of uniqueness of the user. This means that is a new user watches a video segment twice, the “number of times a segment has been watched” will increase by two The plot above was created as a request from usability testing. This shows the average maximum time that a users reach in a video. However, the diagram is slightly misleading. We are simply taking the maximum time that users reach in a video. We are not accounting for the fact that users max have skipped ahead in video time to achieved their maximum time in the video. This problem can be fixed relatively easily in future iterations. The plot above shows instructors which segments have abnormally high and low watch rates. It works by creating a linear model used to predict the watch rate of a given segment. The linear model is based on the video’s occurrence in the course as well as the segment’s position within the video. Once the predicted value has been calculated, segments with the highest and lowest residuals are highlighted. The table above shows much of the information already displayed in the visualizations above. During usability testing, it was discovered that users often want to see the actual numbers as well as the visualiations. "],
["video-dashboard-functions.html", "3 Video Dashboard Functions 3.1 Wrangling Functions 3.2 Server Functions", " 3 Video Dashboard Functions 3.1 Wrangling Functions 3.1.1 wrangle_video 3.1.1.1 Main Documentation Generates cleaned video data as a csv within a specified course directory Description: This function will automatically read files named &quot;generalized_video_heat.csv&quot; and &quot;generalized_video_axis.csv&quot; from the specified course directory and output a csv named &quot;wrangled_video_heat.csv&quot; in the same directory Usage: wrangle_video(input_course, testing = FALSE) Arguments: input_course: String of short name of course directory Value: No value returned Examples: wrangle_video(input_course = &quot;psyc1&quot;) 3.1.1.2 Additional Notes: In order for this function to execute properly, there must be two files in the course directory named “generalized_video_heat.csv” and “generalized_video_axis.csv”. These files are obtained from Google BigQuery. Typically, these files are automatically obtained through the “populate_courses.py” script within the “exec” directory. input_course corresponds to the “short name” within the “.config.json” file The following are descriptions of the columns within the output csv file: video_id: Video ID hash string video_name: Name of the video username: Username of the learner min_into_video: Minute into video of the segment that the learner has watched count: Number of times the learner has watched the segment mode: Whether or not the learner is auditing or a verified student certified: Whether or not the student has been certified gender: Gender of the learner activity_level: Length of time that the student has spent on the course max_stop_position: The mode time at which video_stop events occur. The mode is used instead of the maximum because some videos have video_stop events that occur at incorrect times such as 3 days. course_order: Order in which the video appears in the course index_chapter: Index of the chapter in which the video appears in chapter: Name of the chapter Each video segment is 20 seconds in length. This can be adjusted by changing the global constant SEGMENT_SIZE in the video_wrangling.R file. In order for a segment to be counted as being “viewed”, the user would have to watch the segment for at least 1 second before carrying out another event such as video_pause, video_seek, page_close etc. This threshold of 1 second can be adjusted via the global constant MIN_DURATION in the video_wrangling.R file. The largest length of a video is set to be 1 hour. Any segments passed 1 hour will simply be ignored/truncated. This can be adjusted by changing the global constant MAX_DURATION in the video_wrangling.R file. 3.1.2 obtain_raw_video_data 3.1.2.1 Main Documentation Reads raw uncleaned .csv into a dataframe Description: Reads the raw generalized_video_heat.csv obtained through rbq.py into a dataframe. Usage: obtain_raw_video_data(input_course, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) Value: &#39;data&#39;: Dataframe containing raw student track log information Examples: obtain_raw_video_data(input_course = &#39;psyc1&#39;) 3.1.3 obtain_video_axis_data 3.1.3.1 Main Documentation Reads video_axis.csv file Description: Reads the video_axis csv obtained through rbq.py into a dataframe. For documentation on how to use rbq.py, please see www.temporaryreferencelink.com Usage: obtain_video_axis_data(input_course, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) Value: &#39;video_axis&#39;: Dataframe containing video course structure information Examples: obtain_video_axis_data(input_course = &#39;psyc1&#39;) 3.1.4 write_wrangled_video_data 3.1.4.1 Main Documentation Outputs cleaned data as csv Description: Writes cleaned data as a csv into the course correct directory Usage: write_wrangled_video_data(input_course, cleaned_data, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) cleaned_data: Dataframe containing cleaned data. This cleaned data is typically obtained through &#39;make_tidy_segments()&#39; Value: No return value Examples: write_wrangled_video_data(input_course = &#39;psyc1&#39;, cleaned_data=start_end_df) 3.1.5 prepare_video_data 3.1.5.1 Main Documentation Converts columns into proper variable types and adds additional columns with video information Description: Additional columns added: - &#39;max_stop_times&#39;: proxy for video length - &#39;course_order&#39;: occurrence of video within course structure - &#39;index_chapter&#39;: occurrence of chapter within course structure - &#39;chapter_name&#39;: name of chapter Usage: prepare_video_data(video_data, video_axis) Arguments: video_axis: A dataframe containing course structure information. Contains columns course_order, index_chapter, chapter_name data: Raw input dataframe to be transformed. &#39;data&#39; is obtained through &#39;obtain_raw_video_data()&#39; Value: &#39;prepared_data&#39;: The prepared data with converted variable types and extra columns Examples: prepare_video_data(data) 3.1.6 get_start_end_df 3.1.6.1 Main Documentation Obtains start and end times for video events Description: Parses dataframe and adds columns &#39;start&#39; and &#39;end&#39; showing the start and end time that a user watched a video Usage: get_start_end_df(data) Arguments: data: Dataframe containing tracklog data of students. This is obtained typically through &#39;prepare_video_data()&#39; Details: This will have warning messages that can be ignored. Not sure why they are popping up. Something to do with get_end_time and it being evaluated with an entire column of data instead of just one value. This only occurs once per call of get_end_time. I think its an initialization issue. Value: &#39;start_end_df&#39;: Original dataframe with &#39;start&#39; and &#39;end&#39; columns Examples: get_start_end_df(data = data) 3.1.7 get_watched_segments 3.1.7.1 Main Documentation Returns original dataframe with segment columns Description: Returns original dataframe with segement columns. Segment columns are 0 if the segment is not located within the start and end values and 1 otherwise. Usage: get_watched_segments(data) Arguments: data: Dataframe containing start and end columns. This dataframe is typically obtained through &#39;get_start_end_df()&#39; Value: &#39;data&#39;: Original input dataframe with new segment columns Examples: get_watched_segments(data = start_end_df) 3.1.8 make_tidy_segments 3.1.8.1 Main Documentation Returns tidy (more useable) version of input dataframe Description: Returns a tidy, more usable, version of the input dataframe. Segment information is converted into a single column using &#39;gather()&#39; Usage: make_tidy_segments(data) Arguments: data: Dataframe containing segment information. This dataframe is typically obtained through &#39;get_watched_segments()&#39; Value: &#39;data&#39;: Tidy version of input dataframe. Examples: make_tidy_segments(data = start_end_df) 3.1.9 check_integrity 3.1.9.1 Main Documentation Checks to make sure start and end data passes sanity checks Description: Returns a boolean of whether or not start and end data makes sense. This checks for NA values, end times that are passed the maximum length of the video, and extremely long and short watch durations. The threshold for watch durations can be adjusted in the global constants: &#39;MIN_DURATION&#39; and &#39;MAX_DURATION&#39; Usage: check_integrity(start, end, max_stop_position) Arguments: start: Time into video that the user has started watching the video end: Time into the video that the user has stopped watching the video max_stop_position: Length of the video being watched Value: &#39;integrity&#39;: Boolean of whether or not the data passes integrity checks 3.1.10 get_end_time 3.1.10.1 Main Documentation Calculates video end time for non-video events using time stamps Description: Calculates video end time for non-video events using time stamps Usage: get_end_time(start, time, time_ahead, latest_speed) Arguments: start: Time into video that the user has started watching the video time: Time stamp of when the user started watching the video time_ahead: Time stamp of next event following the play event latest_speed: The speed at which the user was watching the video Value: &#39;end&#39;: Time into video that the user has stopped watching Examples: get_end_time(start, time, time_ahead, latest_speed) 3.1.11 get_mode 3.1.11.1 Main Documentation Obtain most common value from list Description: Obtain most common value from list Usage: get_mode(x) Arguments: x: List containing integer values Value: &#39;mode&#39;: The most common value within the list Examples: get_mode(x=c(0,1,2,2,2,3)) 3.2 Server Functions 3.2.1 get_aggregated_df 3.2.1.1 Main Documentation Aggregates dataframe by video and segment Description: Aggregates input dataframe by video (video_id) and segment (min_into_video). Additionally, adds columns: - &#39;unique_views&#39;/&#39;`Students`&#39; (number of learners who started the video), - &#39;watch_rate&#39;/&#39;`Views per Student`&#39; (number of students who have watched the segment divided by unique_views), - &#39;avg_watch_rate&#39; (average of watch_rate per video) - &#39;high_low&#39; (&quot;High Watch Rate&quot;, &quot;Low Watch Rate, or &quot;Normal&quot;) - &#39;up_until&#39; (1 if the average learner had watched up until the particular min_into_video, 0 if they had not) Usage: get_aggregated_df(filt_segs, top_selection) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; top_selection: Value of the number of top segments to highlight. Value: &#39;aggregate_segment_df&#39;: Aggregated dataframe with additional columns Examples: get_aggregated_df(filt_segs, 25) 3.2.1.2 Additional Notes: This function will read the filtered data frame version of the output csv file from wrangle_video. As an example, this function can be used in the following way: tidy_segment_df &lt;- read_csv(&quot;path/to/course/wrangled_video_heat.csv&quot;) filt_segs &lt;- filter_demographics(tidy_segment_df) aggregated_df &lt;- get_aggregated_df(filt_segs, 10) The high_low segment classification is based off a linear model (using lm) using the following features: course_order: Index of the video arranged by course structure min_into_video: How far into the video the segment is The up_until variable is simply obtained by looking at the maximum time that a video_stop event had occurred. As a consequence, if many students frequently skip to the end of the video without watching anything in between, this statistic may be misinterpreted. There are plans to change this in the future as it is very doable 3.2.2 get_ch_markers 3.2.2.1 Main Documentation Obtains locations of chapter lines to be placed on visualizations Description: Obtains locations of chapter lines to be placed on visualizations Usage: get_ch_markers(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;ch_markers&#39;: List of values of where to place chapter lines on visualizations Examples: get_ch_markers(filt_segs) 3.2.3 get_video_lengths 3.2.3.1 Main Documentation Obtains dataframe with length of videos Description: Obtains dataframe with length of videos Usage: get_video_lengths(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;vid_lengths&#39;: Dataframe with the video lengths associated with each video ID. Examples: get_video_lengths(filt_segs) 3.2.4 get_summary_table 3.2.4.1 Main Documentation Obtains locations of chapter lines to be placed on visualizations Description: Obtains locations of chapter lines to be placed on visualizations Usage: get_ch_markers(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;ch_markers&#39;: List of values of where to place chapter lines on visualizations Examples: get_ch_markers(filt_segs) 3.2.5 get_video_comparison_plot 3.2.5.1 Main Documentation Obtains heatmap plot comparing videos against each other Description: Obtains heatmap plot comparing videos against each other Usage: get_video_comparison_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_video_comparison_plot(filtered_segments, module, filtered_ch_markers) 3.2.6 get_segment_comparison_plot 3.2.6.1 Main Documentation Obtains heatmap plot comparing segments against each other Description: Obtains heatmap plot comparing segments against each other Usage: get_segment_comparison_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_segment_comparison_plot(filtered_segments, module, filtered_ch_markers) 3.2.7 get_top_hotspots_plot 3.2.7.1 Main Documentation Obtains heatmap with segments of highest watch rate highlighted Description: Obtains heatmap with segments of highest watch rate highlighted Usage: get_top_hotspots_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_top_hotspots_plot(filtered_segments, module, filtered_ch_markers) 3.2.7.2 Additional Notes: This function is no longer used the plot was discarded after usability testing. 3.2.8 get_high_low_plot 3.2.8.1 Main Documentation Obtains heatmap plot highlighting which segments have abnormally high or low watch rates Description: Obtains heatmap plot highlighting which segments have abnormally high or low watch rates Usage: get_high_low_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_high_low_plot(filtered_segments, module, filtered_ch_markers) 3.2.8.2 Additional Notes: This function returns a plot where segments with abnormally high and low watch rates are highlighted. “High” and “low” watch rates are determined by the residuals from a linear model obtained via lm Please see source code and documentation for get_aggregated_df for more details. 3.2.9 get_up_until_plot 3.2.9.1 Main Documentation Obtains heatmap plot highlighting which segment has been watched up until on average Description: Obtains heatmap plot highlighting which segment has been watched up until on average Usage: get_up_until_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_up_until_plot(filtered_segments, module, filtered_ch_markers) 3.2.9.2 Additional Notes: This function returns a plot in which segments are highlighted up until the average maximum stop time per student. It should be noted that this diagram may be misleading. Please see documentation for get_aggregated_df for more details. 3.2.10 get_rank 3.2.10.1 Main Documentation Returns the ranking of a vector x Description: Returns the ranking of a vector x Usage: get_rank(x) Arguments: x: A vector of numeric values Value: &#39;g&#39;: The ranking of the values within x Examples: get_rank(c(10, 20, 20, 22, 5)) 3.2.10.2 Additional Notes: This function returns a data frame in which the the duration watched per minute video is calculated. This is calculated by (average time spent on video (minutes) by all learners who have started the video)/(length of video (minutes)) It should be noted that the average time spent on video is calculated via the count in which the segment has been watched multiplied by the segment length. As a result, if users are consistently only watching 3 seconds of a 20 second segment, this number may be artificially inflated. This is because if a student watches more than 1 second of a segment, it will count as a “view”/“count” of the segment. This 1 second threshold can be adjusted via adjusting the global constant MIN_DURATION found in the video_wrangling.R file. "],
["demographics-overview.html", "4 Demographics Overview 4.1 Data Cleaning Pipeline 4.2 Visualization Reasoning and Caveats:", " 4 Demographics Overview 4.1 Data Cleaning Pipeline The figure above shows the data cleaning pipeline for demographics data. Raw student demographics data is initially stored in Google BigQuery. It is downloaded and cleaned programatically through the populate_courses.py script. Next, the cleaned wrangle_demographics.csv file is used to generate the video visualizations. It should be noted that the data obtained through the use of generalized_demographics.sql and rbq.py is not the entire dataset of students. Instead, only students with a known IP address are obtained. This was done because IP address is used to infer statistics such as country and language. Please see generalized_demographics.sql for details. 4.2 Visualization Reasoning and Caveats: The plot above shows the level of education of the students. This is obtained from the LoE variable within the person_course table found on Google BigQuery. In order to transform the level of education code to its actual human readable format such as “Doctorate” or “High School”, the function convert_loe is used. This function assumes that the codes of “p”, “p_se”, and “p_oth” all refer to PhD which translates to a level of education of “Doctorate” in the visualization above. This assumption may not be entirely correct but are based off of the options available on EdX account profiles: The plot above shows the top ten countries according to the number of students enrolled. Student’s country is inferred from their IP addresses within the variable cc_by_ip. This was done because the variable countryLabel available in the person_course BigQuery table is relatively sparse compared to cc_by_ip. The plot above shows the top ten languages according to the number of students that speak it. The students’ language is inferred from their country which is in turn, inferred from their IP address. This was done because the language variable within the person_course table in BigQuery was obtained through their modal video transcripts. The original language variable seemed very biased towards English and as a result, the the students’ language was chosen to be inferred from their country. The plot above shows the distribution of ages amongs the learners. It should be noted that all ages less than 5 and greater than 100 have been filtered out. This was done because their are often fake accounts that entered a year of birth such that their age would be 200 or greater. As a result, the histogram would be difficult to read. The thresholds of 5 and 100 can be adjusted through the constants MIN_AGE and MAX_AGE found within the general_server.R file. Developer Note: The global constants should be transitioned into arguments passed into the get_age_plot function within the general_server.R file. "],
["r-general-demographics-dashboard-functions.html", "5 R General Demographics Dashboard Functions 5.1 Wrangling Functions 5.2 Server Functions", " 5 R General Demographics Dashboard Functions 5.1 Wrangling Functions 5.1.1 wrangle_general 5.1.1.1 Main Documentation Wrangles raw general demographics data Description: Reads the input course&#39;s raw &quot;generalized_demographics.csv&quot; and outputs a cleaned version as wrangled_demographics.csv within the same directory Usage: wrangle_general(input_course) Arguments: input_course: String value of input course short name Value: No value is returned Examples: wrangle_general(&quot;psyc1&quot;) 5.1.2 obtain_raw_general_data 5.1.2.1 Main Documentation Obtains raw general demographic data Description: Obtains raw general demographic data Usage: obtain_raw_general_data(input_course) Arguments: input_course: String value of input course short name Value: Returns a data frame with the raw general demographic data Examples: obtain_raw_general_data(&quot;psyc1&quot;) 5.1.3 obtain_language_info 5.1.3.1 Main Documentation Obtains a data frame with language information Description: Reads in a .csv containing languages and their ISO code. Usage: obtain_language_info() Value: Returns a data frame with languages and their corresponding ISO codes Examples: obtain_language_info() 5.1.4 obtain_country_info 5.1.4.1 Main Documentation Obtains a data frame with countries and ISO codes of their associated languages Description: Obtains a data frame with countries and ISO codes of their associated languages Usage: obtain_country_info() Value: Data frame with countries and their associated ISO language codes Examples: obtain_country_info() 5.1.5 prepare_general_data 5.1.5.1 Main Documentation Cleans raw demographic data Description: Cleans raw demographic data Usage: prepare_general_data(data, language_info, country_info) Arguments: data: Data frame containing student demographic information language_info: Data frame containing languages and their associated ISO codes country_info: Data frame with countries and their associated languages as ISO codes Value: Cleaned data frame containing demographic information Examples: prepare_general_data(obtain_raw_general_data(&quot;psyc1&quot;), language_info(), country_info()) 5.1.6 write_general_data 5.1.6.1 Main Documentation Writes cleaned demographic data frame as a .csv to the specified course Description: Writes cleaned demographic data frame as a .csv to the specified course Usage: write_general_data(input_course, data) Arguments: input_course: String value of course short name data: The data frame containing cleaned demographic data Value: No value is returned Examples: write_general_data(&quot;psyc1&quot;, cleaned_demographic_data) 5.2 Server Functions 5.2.1 convert_loe 5.2.1.1 Main Documentation Converts level of education code to explicit string Description: Converts level of education code to explicit string Usage: convert_loe(LoE) Arguments: LoE: String value of level of education code Value: Returns explicit string value of level of education 5.2.2 get_loe_df 5.2.2.1 Main Documentation Returns aggregated level of education data frame Description: Returns aggregated level of education data frame Usage: get_loe_df(data) Arguments: data: Data frame containing explicit level of education of students Value: Data frame containing aggregated level of education 5.2.3 get_loe_plot 5.2.3.1 Main Documentation Returns plot with level of education of students Description: Returns plot with level of education of students Usage: get_loe_plot(loe_df) Arguments: loe_df: Data frame containing studentes aggregated by level of education Value: Returns a ggplot geom_bar object 5.2.4 get_age_df 5.2.4.1 Main Documentation Returns dataframe with student&#39;s ages Description: Returns dataframe with student&#39;s ages Usage: get_age_df(data) Arguments: data: Dataframe containing year of birth Value: Returns a dataframe with student&#39;s ages 5.2.5 get_age_plot 5.2.5.1 Main Documentation Returns histogram plot of student&#39;s age Description: Returns histogram plot of student&#39;s age Usage: get_age_plot(age_df) Arguments: age_df: Data frame containing age of students Value: Returns a ggplot geom_histogram object 5.2.6 get_top_country_df 5.2.6.1 Main Documentation Returns country aggregated data frame Description: Returns country aggregated data frame Usage: get_top_country_df(data, top_selection) Arguments: data: Data frame containing students&#39; country top_selection: The number of countries to include in output data frame Value: A data frame containing countries with the most number of students 5.2.7 get_country_plot 5.2.7.1 Main Documentation Returns a plot containing student country distribution Description: Returns a plot containing student country distribution Usage: get_country_plot(country_df, top_selection) Arguments: country_df: Data frame of students aggregated by country top_selection: The number of countries to include in the plot Value: Returns a ggplot geom_bar object 5.2.8 get_top_language_df 5.2.8.1 Main Documentation Returns a language aggregated data frame Description: Returns a language aggregated data frame Usage: get_top_language_df(data, top_selection) Arguments: data: Data frame containing student language information top_selection: Number of languages to include within the data frame Value: A data frame containing languages with the most number of students who speak it 5.2.9 get_language_plot 5.2.9.1 Main Documentation Returns plot of language aggregated information Description: Returns plot of language aggregated information Usage: get_language_plot(language_df, top_selection) Arguments: language_df: Data frame with aggregated language information top_selection: Number of different languages to include within the plot Value: Returns a plot languages with the most number of students who speak it "]
]
